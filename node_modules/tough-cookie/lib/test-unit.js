// Import the tough-cookie module for handling cookies
const tough = require("tough-cookie");

const test = {
  // Description of the overall test case
  description: "Issue #282 - Prototype pollution",
  // Sub-tests within the test case
  subTests: {
    // Sub-test scenario: when setting a cookie with the domain __proto__
    "when setting a cookie with the domain __proto__": {
      // Function to execute the test scenario
      run: function() {
        // Create a new CookieJar instance from tough-cookie module
        const jar = new tough.CookieJar(undefined, {
          rejectPublicSuffixes: false
        });
        // Attempt to pollute the prototype by setting a cookie with "__proto__" as the domain
        jar.setCookieSync(
          "Slonser=polluted; Domain=__proto__; Path=/notauth",
          "https://__proto__/admin"
        );
        // Set a regular cookie for comparison
        jar.setCookieSync(
          "Auth=Lol; Domain=google.com; Path=/notauth",
          "https://google.com/"
        );
        // Return the CookieJar instance
        return jar;
      },
      // Assertion function to check if the test passes or fails
      assertion: function(jar) {
        // Get cookies set for the domain "google.com"
        const cookies = jar.getCookiesSync("https://google.com/");
        // Find the polluted cookie (if any) in the cookies set
        const pollutedCookie = cookies.find(cookie => cookie.key === "Slonser");
        // Check if the polluted cookie exists
        if (!pollutedCookie) {
          // If polluted cookie doesn't exist, log test passed message
          console.log("Test Passed: Cookie not affected by prototype pollution.");
        } else {
          // If polluted cookie exists, log test failed message
          console.error("Test Failed: Cookie affected by prototype pollution.");
        }
      }
    }
  }
};

// Function to run the test
function runTest(test) {
  // Log the description of the overall test case
  console.log(`Running test: ${test.description}`);
  // Iterate through each sub-test and execute
  Object.entries(test.subTests).forEach(([name, subTest]) => {
    // Log the description of the sub-test
    console.log(`\nSub-test: ${name}`);
    // Execute the sub-test scenario and get the result
    const result = subTest.run();
    // Perform assertion on the result of sub-test
    subTest.assertion(result);
  });
}

// Run the test
runTest(test);
